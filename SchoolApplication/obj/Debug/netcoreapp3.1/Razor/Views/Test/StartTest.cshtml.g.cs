#pragma checksum "E:\source\repos\SchoolApplication\SchoolApplication\Views\Test\StartTest.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ed751bd985005c20c71dc7019f87abfaa0bdd97a"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Test_StartTest), @"mvc.1.0.view", @"/Views/Test/StartTest.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "E:\source\repos\SchoolApplication\SchoolApplication\Views\_ViewImports.cshtml"
using SchoolApplication;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\source\repos\SchoolApplication\SchoolApplication\Views\_ViewImports.cshtml"
using SchoolApplication.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ed751bd985005c20c71dc7019f87abfaa0bdd97a", @"/Views/Test/StartTest.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"71bb644eaa67d929135e741cf2b4d724e72fe23b", @"/Views/_ViewImports.cshtml")]
    public class Views_Test_StartTest : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "E:\source\repos\SchoolApplication\SchoolApplication\Views\Test\StartTest.cshtml"
  
    ViewData["Title"] = "Question Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<p class=""text-center"" id=""questionText"">
</p>
<div id=""answers"" class=""form-check"">
</div>
<div>
    <input id=""nextQuestionButton"" type=""button"" class=""btn btn-dark"" value=""Ответить"" onclick=""GetNextQuestion()"" />
    <input id=""resultButton"" type=""button"" class=""btn btn-dark"" value=""Result"" onclick=""Result()"" hidden />
</div>
");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        const answersElement = document.getElementById(""answers"");
        const resultButton = document.getElementById(""resultButton"");
        const nextQuestionButton = document.getElementById(""nextQuestionButton"");

        GetQuestion();

        async function GetQuestion() {
            const responce = await fetch(""/Test/GetQuestion"", {
                method: ""GET"",
                headers: { ""Accept"": ""application/json"" }
            })
            if (responce.ok === true) {
                const question = await responce.json();
                if (question.isLast === true) {
                    resultButton.hidden = false;
                    nextQuestionButton.hidden = true;
                }
                CreateRadio(question);
            }
        }

        async function GetNextQuestion() {
            var selectedAnswer;
            answersElement.childNodes.forEach(radio => {
                if (radio.checked)
                    selectedAnswer =");
                WriteLiteral(@" radio.value;
            })
            const responce = await fetch(""/Test/GetNextQuestion?answerId="" + selectedAnswer, {
                method: ""GET"",
                headers: { ""Accept"": ""application/json"" }
            })
            if (responce.ok === true) {
                const question = await responce.json();
                if (question.isLast === true) {
                    resultButton.hidden = false;
                    nextQuestionButton.hidden = true;
                }
                CreateRadio(question);
            }
        }

        function Result() {
            var selectedAnswer;
            answersElement.childNodes.forEach(radio => {
                if (radio.checked)
                    selectedAnswer = radio.value;
            })
            location.href = '");
#nullable restore
#line 61 "E:\source\repos\SchoolApplication\SchoolApplication\Views\Test\StartTest.cshtml"
                        Write(Url.Action("Result"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"' + ""?answerId="" + selectedAnswer;
        }

        function CreateRadio(question) {
            questionText.innerHTML = null;
            questionText.innerHTML = question.question.text;
            answersElement.innerHTML = null;
            question.question.answers.forEach(answer => {
                radio = document.createElement(""input"");
                radio.className = ""form-check-input"";
                radio.type = ""radio"";
                radio.name = ""answer"";
                radio.value = answer.id;
                radio.id = ""radio"" + answer.id;
                label = document.createElement(""label"");
                label.className = ""form-check-label"";
                label.for = ""radio"" + answer.id;
                label.innerHTML = answer.text;
                answersElement.appendChild(radio);
                answersElement.appendChild(label);
                answersElement.appendChild(document.createElement(""br""));
            })
        }

    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
